apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'com.github.jruby-gradle.base'

project.ext["jqaversion"] = "1.1.0"
project.group = 'de.kontext-e.jqassistant.plugin'
project.version = '1.2.0-SNAPSHOT'

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
    classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.11'
  }
}

asciidoctor {
  dependsOn jrubyPrepareGems
  requires = ['asciidoctor-diagram']
  gemPath = jrubyPrepareGems.outputDir
  sourceDir = file('doc/architecture')

  resources {
    from('doc/architecture') {
      include '**/*.png'
    }
  }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: "jacoco"
    apply plugin: 'pmd'
    apply plugin: 'org.asciidoctor.gradle.asciidoctor'
    apply plugin: 'com.github.jruby-gradle.base'

    project.version = project.parent.version
    sourceCompatibility = 1.7

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'com.buschmais.jqassistant.core:jqassistant.core.scanner:'+project.jqaversion
        compile 'com.buschmais.jqassistant.core:jqassistant.core.store:'+project.jqaversion
        compile 'com.buschmais.jqassistant.plugin:jqassistant.plugin.common:'+project.jqaversion
        compile 'org.ow2.asm:asm:5.0.3'
        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

        gems 'rubygems:asciidoctor-diagram:1.2.1'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from tasks.javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }

    artifacts {
      archives jar

      archives javadocJar
      archives sourcesJar
    }

  if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
  }

  jacoco {
    toolVersion = "0.7.1.201405082137"
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
    }
  }

  checkstyle {
      configFile = new File(rootDir, 'config/checkstyle/checks.xml')
      ignoreFailures = true
      showViolations = false
      toolVersion = '5.7'
    }

    findbugs {
      ignoreFailures = true
      effort = "max"
      reportLevel = "medium"
    }

    pmd {
      ruleSets = ["java-basic", "java-braces"]
      ignoreFailures = true
      sourceSets = [sourceSets.main]
    }

    install {
        repositories.mavenInstaller {
            pom.groupId = 'de.kontext-e.jqassistant.plugin'
        }
    }

  asciidoctor {
    dependsOn jrubyPrepareGems
    requires = ['asciidoctor-diagram']
    gemPath = jrubyPrepareGems.outputDir
    sourceDir = file('src/main/asciidoc')

    resources {
      from('src/main/asciidoc') {
        include '**/*.png'
      }
    }
  }

}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {

  runtime("com.buschmais.jqassistant.core:jqassistant.core.store:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.core:jqassistant.core.scanner:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.core:jqassistant.core.analysis:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.common:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.scm:jqassistant.scm.cli:${project.jqaversion}")

  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.cdi:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.ejb3:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.java:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.java8:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.javaee6:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.jaxrs:${project.jqaversion}")
  runtime("com.buschmais.jqassistant.plugin:jqassistant.plugin.jpa2:${project.jqaversion}")

  runtime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.checkstyle:${project.version}")
  runtime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.findbugs:${project.version}")
  runtime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.jacoco:${project.version}")
  runtime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.git:${project.version}")
  runtime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.pmd:${project.version}")
  runtime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.plantuml:${project.version}")

  runtime 'com.sun.jersey:jersey-server:1.13'
  runtime 'com.sun.jersey:jersey-core:1.13'
  runtime 'com.sun.jersey:jersey-servlet:1.13'


  gems 'rubygems:asciidoctor-diagram:1.2.1'
}

task removeJQAReport(type: Delete) {
  delete 'jqassistant/report'
  delete 'jqassistant/store'
}

task(jqascan, dependsOn: 'removeJQAReport', type: JavaExec) {
  main = 'com.buschmais.jqassistant.scm.cli.Main'
  classpath = sourceSets.main.runtimeClasspath
  args 'scan'
  args '-p'
  args 'jqassistant/jqassistant.properties'
  args '-f'
  args 'checkstyle/build/reports'
  args 'findbugs/build/reports'
  args 'git/build/reports'
  args 'jacoco/build/reports'
  args 'pmd/build/reports'
  args 'plantuml/build/reports'
//  args 'plantuml/src/test/plantuml'
  args 'plantuml/src/test/asciidoc'
  args 'java:classpath::checkstyle/build/classes'
  args 'java:classpath::findbugs/build/classes'
  args 'java:classpath::git/build/classes'
  args 'java:classpath::jacoco/build/classes'
  args 'java:classpath::pmd/build/classes'
  args 'java:classpath::plantuml/build/classes'

  args '.git'

}

task(jqaanalyze, type: JavaExec) {
  main = 'com.buschmais.jqassistant.scm.cli.Main'
  classpath = sourceSets.main.runtimeClasspath
  args 'analyze'
  args '-r'
  args 'doc/architecture'
  //args 'jqassistant/jqassistant-rules'
}

task(jqa, dependsOn: ['jqascan','jqaanalyze']) {
  jqaanalyze.mustRunAfter jqascan
}

task(jqs, type: JavaExec) {
  main = 'com.buschmais.jqassistant.scm.cli.Main'
  classpath = sourceSets.test.runtimeClasspath
  args 'server'
  standardInput = System.in
}

